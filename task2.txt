Задание 2
Ответить на вопросы:
Что такое проект?
Из каких этапов состоит Waterfall model/Каскадная модель?
Какие преимущества и недостатки Waterfall model/Каскадной модели?
Из каких этапов состоит V-model/V- модель?
Когда использовать V-model/V- модель?
Из каких этапов состоит Iterative model/Итеративная модель?
Когда использовать Iterative model/Итеративной модели?
Плюсы и минусы Iterative model/Итеративной модели?
Спиральная модель разработки ПО.
Модель прототипа
Принцип “Большого взрыва”
Agile - это?
Agile манифест - это?
Какие ценности Agile манифест?
Основные принципы Agile манифест?
Scrum - это? (опишите подробно)
Что такое Velocity / Capacity?
Преимущества и недостатки Scrum
Что такое ретроспектива?
Kanban- это? (опишите подробно)
Преимущества и недостатки Kanban?
Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?
Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?
В чем разница между Kanban и Scrum?

Что такое проект?
Проект в тестировании - это конкретная задача или набор задач, направленных на проверку качества ПО.  

Методологии/модели разработки ПО

Водопадная (каскадная) модель предполагает линейный подход, где каждая фаза проекта завершается полностью перед переходом к следующей.

Основные этапы:
1. Сбор и анализ требований - это понимание того, что необходимо реализовать.
2. Проектирование: Создание архитектуры системы и проектирование ее компонентов. Здесь разрабатываются как высокоуровневые, так и детализированные спецификации.
3. Кодирование: На этом этапе разработчики пишут код, основываясь на проектной документации. Реализуются все функциональные компоненты системы.
4. Тестирование: Проведение тестирования для выявления и исправления ошибок. На этом этапе проверяется соответствие реализованных функций их требованиям.
5. Внедрение: Установка и настройка системы в рабочую среду, а также обучение пользователей.
6. Поддержка: Обеспечение технической поддержки и исправление ошибок в процессе эксплуатации системы. Это также может включать внесение изменений на основе отзывов пользователей.
Каждый из этих этапов должен быть завершен до перехода к следующему, и, как правило, модель «водопад» менее гибка, чем современные итеративные подходы.
Преимущества:
Простота:  Каждый этап отчетливо обозначен.
Четкие требования: Поскольку требования собираются в начале, это помогает избежать путаницы в дальнейших этапах.
Документированность: Модель предполагает наличие обширной документации на каждом этапе, что облегчает управление проектом.
Легкая оценка прогресса: Каждый этап завершен до перехода к следующему, что упрощает отслеживание статуса проекта.
Подходит для небольших проектов: В некоторых случаях, особенно для малых и средних проектов, модель «водопад» может быть достаточно эффективной.
Недостатки:
Негибкость: Изменения на поздних стадиях разработки могут быть дорогими и сложными, так как они требуют возврата к предыдущим этапам.
Риски неполных требований: Если вначале не удается определить все требования, это может привести к серьезным проблемам в будущем.
Поздняя доставка: Тестирование происходит только после завершения кодирования, что может выявить ошибки и недочеты слишком поздно в процессе.
Сложность в управлении изменениями: Если в процессе разработки появляются новые требования, их внедрение может вызвать значительные затруднения.
Неэффективность для крупных проектов: Для проектов с высоким уровнем сложности и изменения требований модель «водопад» может оказаться неэффективной.
С точки зрения же тестирования эта модель плоха тем, что тестирование в явном виде появляется здесь лишь с середины развития проекта, достигая своего максимума в самом конце.


Использование водопадной модели

Сейчас водопадную модель применяют в авиастроении, военной или космической отраслях, медицине и финансовом секторе. 
V – модель


Эта модель имеет форму буквы V, где каждый этап разработки сопряжен с соответствующим этапом тестирования.
Этапы V-образной модели:
Сбор требований (Бизнес требования): Заказчик предоставляет описание своих потребностей и желаний.
Анализ требований (Функциональные требования): Преобразование требований заказчика в формальный набор спецификаций.
Проектирование (Архитектура системы и ее компонентов): Разработка архитектуры системы, ее компонентов и взаимодействия.
Разработка: Написание кода, реализующего проект.
Модульное тестирование: Проверка отдельных компонентов системы.
Интеграционное тестирование: Проверка взаимодействия между компонентами.
Функциональное/системное тестирование: Проверка системы в целом.
Приемочное тестирование: Проверка системы заказчиком.


Тестирование в этой модели появляется уже на самых ранних стадиях развития проекта.
Преимущества:
Структурированный подход: V-образная модель предлагает четкую и структурированную методологию, что упрощает планирование и управление проектом.
Поддержка раннего тестирования: Первый этап верификации осуществляется на этапе проектирования, что помогает раньше выявлять и устранять проблемы.
Фокус на требования: Модель акцентирует важность правильного сбора и анализа требований, поскольку ошибки на этом этапе могут быть очень дорогостоящими.
Соответствие документированным процессам: Каждый этап модели прописан и требует документирования, что улучшает отслеживание прогресса.
Легкость в управлении: Ясная иерархия этапов и взаимосвязь между ними позволяет легче управлять процессом разработки.
Недостатки:
Сложность во внесении изменений: Из-за строгой структуры процесса и документирования внесение изменений в требования или проект может быть затруднительным.
Не учитывает итеративность: Модель не предназначена для итеративных процессов, что может быть ограничивающим в средах, где требуется гибкость.
Высокие затраты на тестирование: Тестирование на каждом этапе может быть затратным по времени и ресурсам, особенно если система сложная.
Риск неудачи на этапе интеграции: Ошибки или недостатки, выявленные на более поздних этапах, могут быть сложными и дорогими в исправлении, если они не были замечены на ранних этапах.
Не всегда подходит для гибкой разработки: V-образная модель не всегда подходит для проектов с высокими требованиями к изменениям или неопределенностью, как это бывает в Agile-подходах.
Когда использовать V-model/V- модель?
Если проекту требуются детально проработанные требования и не ожидается значительных изменений на протяжении жизненного цикла, V-модель будет идеальным выбором, обеспечивая стабильность и предсказуемость процесса со строгим контролем на каждом этапе разработки.

Сейчас она является стандартом для немецких правительственных и оборонных проектов, а также для производителей ПО в Германии.

Инкрементальная модель

включает в себя циклический процесс, где разработка и развертывание ПО происходит поэтапно. 

Каждый этап добавляет новые функции или улучшения к уже существующему функционалу, формируя более полную и совершенную версию продукта.

Она предполагает, что проект строится и разворачивается по частям или "инкрементам". 	
Этапы инкрементальной модели:
Требования - проектирование и разработка - тестирование - внедрение


Итеративная модель

Предполагает, что проект разбивается на повторяющиеся циклы или "итерации". 

На каждом этапе создается рабочая версия продукта, которую затем можно улучшать и дорабатывать.

Этапы итеративной модели:
 Планирование — Реализация — Проверка — Корректировка




Параметр
Инкрементальная
Итерационная
Фокус
поэтапное улучшение  - добавлении новых функциональностей
цикличное улучшение - улучшении существующей версии продукта
Сходства
1. модели включают в себя процессы обратной связи и улучшений
2. в обеих моделях продукт развивается со временем
различия
проект часто разбивается на независимые части, каждая из которых может проходить полный цикл разработки и выпускаться по отдельности
один цикл включает в себя все аспекты проекта  от планирования до тестирования и доработки
Преимущества и недостатки:
преимущества
- ясная структура
- возможность раннего внедрения функционала
- постепенное добавление сложностей
- быстрое получение обратной связи
- гибкость в изменениях
- улучшение на основе тестирования и отзывов
недостатки
- риск несогласованности между инкрементами
- необходимость тщательной интеграции
- возможность растяжения сроков и бюджета
- сложности в планировании
Когда использовать:
использование
- Требования к конечной системе заранее четко определены и понятны. 
- Проект большой или очень большой. 
- Основная задача должна быть определена, но детали реализации могут эволюционировать с течением времени
- В условиях неопределенности, когда требования могут изменяться, и важна обратная связь от пользователей.
- В то же время некоторые детали могут дорабатываться с течением времени.
- Требуется ранний вывод продукта на рынок.


СПИРАЛЬНАЯ МОДЕЛЬ (Spiral model)
это модель с повторяющейся последовательностью циклов разработки с непрерывным контролем рисков.
Она сочетает в себе элементы каскадной модели (водопада) и итеративной модели.
Каждый цикл включает в себя следующие этапы:
Определение требований: Определение целей и требований проекта, а также анализ рисков.
Анализ рисков: Выявление и оценка потенциальных проблем, которые могут возникнуть в ходе разработки.
Разработка: Создание прототипа или части продукта для проверки концепции.
Реализация и тестирование: Оценка результата разработки, выявление и исправление ошибок. => Интеграция (Внедрение)
Эта модель позволяет постепенно снижать риски и повышать качество продукта. Она также подходит для проектов с неопределенными или изменяющимися требованиями                
ИСПОЛЬЗОВАНИЕ: Спиральная модель разработки используется в тех случаях, когда проект имеет высокую степень неопределенности и значительные риски, которыми нужно управлять на протяжении всего процесса разработки.
ПРЕИМУЩЕСТВА: Управление рисками, Удовлетворенность клиентов, Гибкость требований, Улучшенное качество.
НЕДОСТАТКИ: Ресурсоемкость, Сложность, Сложность управления временем, Слишком большая зависимость от анализа рисков.


Модель прототипа
эта модель предполагает создание и тестирование прототипа продукта до начала полного его развития. 
Прототип - это ранний вариант программы, который демонстрирует основные функции и интерфейс, но не содержит всей функциональности. 
Эта модель позволяет получить раннюю обратную связь от пользователей, внести изменения и уточнить требования к продукту.
Этапы: Сбор и анализ требований, Быстрый дизайн, Создание прототипа, Первоначальная оценка пользователя, Доработка прототипа, Внедрение продукта и его обслуживание.
Преимущества: 
- Позволяет показать владельцу продукта дизайн и функции приложения на ранних стадиях разработки. 
- Пользователи активно участвуют в разработке. Поэтому ошибки могут быть обнаружены на начальном этапе процесса разработки программного обеспечения.
- Можно выявить недостающую функциональность, что помогает снизить риск сбоя, поскольку прототипирование также рассматривается как деятельность по снижению риска.
Недостатки: Затраты времени и ресурсов, Риск создания некачественной архитектуры, Ожидания пользователей.
Использование: Она полезна для проектов, использующих новую технологию, которая еще недостаточно изучена, и для проектов с высоким уровнем риска. Также ее часто применяют в исследовательских проектах.
Принцип «Большого Взрыва»
это метод тестирования ПО, при котором все компоненты системы тестируются одновременно, а не поэтапно. Это означает, что все модули собираются вместе и тестируются как единое целое. 

Преимущества:
Общая проверка интеграции: Позволяет выявить проблемы, возникающие на уровне интеграции модулей, что может быть упущено при поэтапном тестировании.
Скорость: При тестировании всех компонентов сразу можно быстрее получить общий результат о работоспособности системы.
Краткость цикла разработки: Упрощает процесс тестирования при работе над небольшими проектами или в ранней стадии разработки.
Завершенный тест: Позволяет протестировать все функции и сценарии работы программы сразу, что может дать полное представление о системе.
Недостатки:
Сложность отладки: Если тестирование проваливается, установление причины проблемы может быть затруднительным, так как возможно множество взаимодействий между модулями.
Высокие затраты на ресурсы: Может требовать больше ресурсов (времени и вычислительных мощностей), особенно для больших систем.
Риски накопления ошибок: Большое количество ошибок может скрыть более значимые проблемы, что делает их трудными для выявления.
Неэффективность для крупных проектов: Не всегда целесообразно для больших и сложных систем, где поэтапное тестирование более управляемо.
Менее контролируемый процесс: Поскольку всё тестируется сразу, это может привести к недостаточной документированности и контролю за тестовыми случаями.
Использование принципа "Большого Взрыва" лучше всего подходит для небольших проектов или в ситуациях, когда интеграция компонентов является критически важной. В иных случаях могут быть более эффективные подходы, такие как модульное или инкрементальное тестирование.


SDLC (Software Development LifeCycle)
Жизненный цикл разработки ПО
STLC (Software Testing LifeCycle)
Жизненный цикл тестирования
это процесс, направленный на создание и поддержание работоспособности, качества и надежности ПО.
Это процесс поэтапной разработки ПО.
это процесс тестирования, который включает в себя определенную последовательность шагов, чтобы гарантировать достижение целей в области качества. 

Он помогает убедиться в том, что разрабатываемое ПО работает правильно и соответствует заданным требованиям.
Этапы
Анализ и сбор требований (планирование) 
Дизайн и проектирование 
Разработка ПО 
Тестирование
Развертывание/Внедрение
Обслуживание и поддержка 
Анализ требований
Планирование тестирования 
Разработка тест-кейсов
Настройка тестового окружения
Выполнение тестирования
Завершение цикла тестирования  - окончательная генерация отчетов о тестировании для клиента. 
КЛЮЧЕВАЯ РАЗНИЦА
определяет все стандартные фазы, которые участвуют в процессе разработки ПО
команда разработчиков создает планы проектирования высокого и низкого уровня
разрабатывается реальный код, и фактическая работа выполняется в соответствии с проектной документацией
помогает команде завершить успешную разработку ПО
различные действия для улучшения качества продукта.
аналитик тестов создает План тестирования интеграции.
команда тестирования готовит среду тестирования и выполняет test-cases
охватывают только тестирование ПО.




 Что такое Agile?
Agile - это гибкий подход к управлению проектами, который предполагает разделение проекта на этапы, а также непрерывное сотрудничество и совершенствование.

Для Agile характерна работа короткими итерациями по две-три недели. 
Внутри каждой итерации собрана серия задач: анализ, проектирование, непосредственно работа и тестирование. 
После каждой итерации команда анализирует результаты и меняет приоритеты для следующего цикла.
 
Agile манифест - это ключевой документ, в котором перечислены фундаментальные идеи и положения методологии разработки ПО.
Ценности Agile манифеста
Люди и взаимодействие важнее процессов и инструментов
Работающий продукт важнее исчерпывающей документации
Сотрудничество с заказчиком важнее согласования условий контракта
Готовность к изменениям важнее следования первоначальному плану
12 Принципов Agile
Главное в проекте — довольный результатом клиент.
Необходимо мотивировать всех сотрудников.
Самоорганизация помогает команде создавать лучшие решения.
Работающий продукт — подтверждение прогресса
Необходимо как можно чаще выпускать работающие версии продукта.
Необходимость поддерживать устойчивый процесс разработки.
Постоянное внимание к техническому совершенствованию и качеству проектирования повышает гибкость проекта.
Проектной команде и представителям бизнеса нужно работать вместе.
Эффективнее всего обмениваться информацией при непосредственном общении.
Изменение требований во время работы — это нормально.
Лишняя работа — показатель неэффективности.
Регулярные ретроспективы для улучшения процессов.


Применение указанных принципов требует времени и практики, но они помогут улучшить координацию, эффективность и конечный результат проекта.



Scrum         
Kanban        
определение
это система управления, которую группы используют для самоорганизации и работы над достижением общей цели. 
это метод управления проектами, который визуализирует все этапы проекта на специальной доске.
основная идея
учиться на собственном опыте, самоорганизовываться и расставлять приоритеты, анализировать успехи и ошибки

Основные принципы:
итеративность и инкрементность
команды
роли в scrum
повышать качество выполняемой работы с помощью визуализации рабочего процесса

Ключевые шаги
Создание визуальной доски
Определение рабочих элементов
Установка ограничений по работе в процессе 
Регулярное обновление доски
Мониторинг и анализ
Непрерывное улучшение
Адаптация и гибкость
график
Работа разбивается на короткие итерации - спринты (от 1-4 недель) 

В конце каждого спринта команда должна представить рабочую версию продукта (инкремент), который можно демонстрировать заинтересованным сторонам.
непрерывный рабочий процесс, пока проект не будет завершен
методы
Планирование спринта: Встреча, на которой команда выбирает задачи из бэклога продукта, которые они собираются выполнить в текущем спринте, и определяет, как они будут их реализовывать.
Ежедневный Scrum: Краткая встреча (обычно 15 минут), на которой команда обсуждает, что они сделали со времени последней встречи, что будут делать дальше и какие препятствия мешают движению вперед.
Обзор спринта (Sprint Review): Встреча в конце спринта, на которой команда демонстрирует готовый инкремент и собирает обратную связь от заинтересованных сторон.
Ретроспектива спринта: 
 это встреча, на которой команда обсуждает, что прошло хорошо, что можно улучшить и какие шаги предпринять для оптимизации работы в следующих спринтах.

Участники:
Product Owner
Scrum Master
Команда разработки (Development Team) 
Заинтересованные стороны

Этапы ретроспективы:
подготовка;
сбор данных;
генерация идей;
выработка плана.
завершение.
визуализация процесса работы, ограничение объемов незавершенной работы,
включение циклов обратной связи
митинги называют “событиями” или “каденциями”
артефакты
Бэклог продукта: Это приоритетный список задач, функций и улучшений, которые необходимо реализовать в продукте. Бэклог постоянно обновляется и уточняется.
Бэклог спринта: Набор задач из бэклога продукта, выбранный для реализации в текущем спринте.
Инкремент: Это сумма всех выполненных задач и функций за текущий и предыдущие спринты. Инкремент должен быть работоспособным и предоставлять ценность.
канбан-доски:
физические:
обычные доски,
Наклейки и магнитные карточки
Флипчарты и маркеры
цифровые:
Trello
Jira
Asana
Monday.com
ClickUp
Azure DevOps
Kanban Tool
роли 
Product Owner (владелец продукта): Определяет, что и в каком порядке нужно делать, управляет бэклогом продукта и отвечает за максимизацию ценности продукта.
Scrum Master: Обеспечивает соблюдение процессов Scrum, помогает команде устранить преграды и взаимодействует с владельцем продукта и другими заинтересованными сторонами.
Команда разработки: Работает над выполнением задач и созданием инкремента продукта в каждом спринте.
нет специфических ролей
метрики
 Для оценки производительности команды используются: 
Velocity — это показатель количества работы (story points)/ скорость с которой команда может выполнить задания за один спринт. 
Цель  –  выяснить, сколько задач команда реально выполняет за спринт с нужным качеством. 
Вычисляется V = сумма выполненных Story Points 
Story points - единицы сложности, присвоенные каждому заданию. 
Capacity — это объем работы, который команда или разработчик может выполнить за определенный период времени с учетом имеющихся ресурсов. 
Capacity  зависит от факторов: 
количество доступных разработчиков, 
время, затрачиваемое на совещания, 
другие обязательства (например отпуск, 
болезни).
пропускная способность, 
время цикла
управление изменениями
изменения проводятся между спринтами, основываясь на ретроспективе. не допускаются изменения во время спринта
изменения могут быть внесены в любой момент
преимущества
Гибкость: Scrum позволяет адаптироваться к изменениям во время проекта.
Повышенная прозрачность: С помощью ежедневных встреч и демонстраций команда остается в курсе прогресса.
Улучшение качества: Постоянное совершенствование процесса и продукта.
Увеличенная продуктивность: Команды работают в сфокусированном режиме, что повышает их эффективность.
1. Гибкость
2. Минимизация времени цикла
3. Прозрачность
4. Улучшение рабочего потока
5. Постоянное улучшение
6. Отсутствие жесткого расписания
7. Фокус на качестве
8. Улучшение коммуникации
недостатки
Не подходит для всех проектов: Scrum может быть неэффективным для проектов с четко определенными требованиями и без возможности изменений.
Требует сильного менеджмента: Управление проектом по Scrum требует дисциплины и командной работы.
Сложно внедрять: Необходимо время для обучения и адаптации к новой методологии.
1. Отсутствие структуры.
2. Отсутствие временных рамок.
3. Ограниченное количество ретроспектив спринта.
4. Отсутствие расстановки приоритетов. 
различия
Scrum — это более структурированный подход, который использует итерации (спринты) продолжительностью 2 недели. В Scrum есть роли (Product Owner, Scrum Master, Development Team), артефакты (Product Backlog, Sprint Backlog, Increment) и мероприятия (Sprint Planning, Daily Scrum, Sprint Review, Sprint Retrospective). Scrum фокусируется на планировании работы по коротким циклам и постоянном улучшении процесса.
Kanban — это более гибкий подход, который использует визуализацию задач в виде доски Kanban. В Kanban нет фиксированных итераций, а задачи могут добавляться и перемещаться по доске в любое время. Kanban фокусируется на визуализации процесса работы, улучшении потока задач и оптимизации рабочего процесса.



В итоге, Scrum подходит для проектов с четко определенными целями и сроками, а Kanban — для проектов с изменяющимися требованиями и непрерывным потоком задач.


Покер планирования: всем участникам команды раздаются карты с числами из шкалы оценки. Затем выбирается задача и обсуждаются требования к ней. После обсуждения модератор просит всех членов команды выбрать карту и положить ее «рубашкой» вверх. Затем модератор дает сигнал показать карты.

Если оценки участников согласуются – оценка фиксируется, в противном случае карты возвращаются в руку, а члены команды продолжают обсуждение задачи. Хорошая идея — спросить у выставивших разные оценки: «Какие сложности ты видишь в этой задаче?» или «Почему ты считаешь, что во время реализации не возникнет никаких проблем?». Согласие не должно быть абсолютным. Можно условиться, что набор соседних оценок также считается согласием.
