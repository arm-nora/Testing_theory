Задание 3


Что такое функциональное тестирование (Functional/Behavioral testing)?
Что такое нефункциональное тестирование (Non-Functional testing)?
Виды функционального тестирования.
Какие виды тестирования относятся к функциональному тестированию?
Какие виды тестирования относятся к нефункциональному тестированию?
Что такое Статическое/Динамическое тестирование?
Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?
Что такое Компонентное(Component or Unit Testing) /Интеграционное (Integration Testing)
Что такое Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?
Что такое Позитивное/Негативное тестирование?
Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?
Что такое Интуитивное/Исследовательское тестирование?
Что такое Gorilla testing/ Monkey testing?
Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?
Что такое Тестирование нового функционала/ Приемочное тестирование?
Что такое Ручное/Автоматизированное/Полуавтоматизированное тестирование?
На основании чего происходит разработка тестовых сценариев?
Что такое Frontend / Backend?
Что такое тестирование безопасности?
Перечислите Принципы безопасности программного обеспечения
Перечислите виды уязвимостей в безопасности программного обеспечения
Что такое Тестирование на отказ и восстановления Failover and Recovery Testing?
Что такое тестирование Эффективности использования ресурсов?
Что такое тестирование Масштабируемости (Scalability testing)?
Что такое тестирование Производительности (Performance testing)/Load testing/Stress testing/Volume testing?
Что такое тестирование Надежности(Reliability Testing)?
Что такое тестирование Стабильности (Stability Testing)?
Что такое тестирование Удобства использования(Usability testing)?
Что такое тестирование Pixel Perfect? Какие инструментами можно пользоваться при тестировании Pixel Perfect?
Что такое тестирование Локализации / Совместимости/ Адаптивности?
Что такое тестирование ремонтопригодности?
Что такое тестирование заменимости?
Что такое тестирование установки (Installation Testing)?
Что такое ETL-тестирование/Тестирование перед миграцией (Pre-Migration testing)/Миграционное тестирование (Migration testing)/Тестирование после миграции (Post-Migration testing)?


1. Функциональное тестирование (functional testing):
анализирует функциональность приложения, компонента или системы, проводимое с целью проверки на соответствие требованиям.


Проще говоря, тестируется соответствие работы продукта заявленным в документации требованиям.

Проверка того, ЧТО ДЕЛАЕТ система.
Функциональное тестирование может проводиться на всех уровнях тестирования.
2. Нефункциональное тестирование (non-functional testing): 
тестирование атрибутов компонента или системы, не относящихся к функциональности, то есть:
◦ надежность,
◦ внешний вид,
◦ практичность,
◦ устойчивость.


Проверяет, КАК система РАБОТАЕТ.  Может быть представлено на всех уровнях тестирования.


Behavioral testing - это процесс проверки поведения ПО. 
Он обычно включает в себя тестирование функциональности и может быть автоматизирован. Тестирование поведения - это итеративный процесс, который развивается с опытом и обратной связью, что приводит к постоянному улучшению сценариев тестирования поведения.
Какие виды тестирования относятся к функциональному тестированию?
По исполнению кода:
Статическое 
- это процесс анализа программного кода, документации и других артефактов разработки без выполнения кода. 
Цель: выявление ошибок на ранних стадиях разработки, что позволяет сэкономить время и ресурсы.

Динамическое 
- это тестирование с запуском кода
Цель: выявление ошибок в рабочем ПО и проверка его функциональности.
Обычно динамическое тестирование используется после статического тестирования, когда программный код уже был проверен на наличие очевидных ошибок.

Подходят любые методы с запуском кода: модульное, интеграционное, системное, приемочное тестирование.
По знанию системы:
“Белого ящика” 
- тестировщик имеет доступ к коду, опирается на понимание кода во время составления тестов и\или используется код воао время тестирования.
В основном это Unit и интеграционное тестирование и выполняется оно, как правило, разработчиками.

“Серого ящика” 
- тестирование, при котором, тестировщик имеет доступ только к некоторой части кода и использует это при составлении тестов и их выполнение.
(Использование БД, Devtools, Postman, Charles)

“Черного ящика” 
- тестирование приложения без знания внутренней системы (кода), когда тестировщик опирается на требования и работает с интерфейсом.
Убедиться, что система корректно обрабатывает допустимые данные.
Проверить, как система обрабатывает некорректный формат email.
Проверить, как система обрабатывает отсутствие данных.
Проверить, как система обрабатывает значения, превышающие допустимую длину.
По уровням тестирования:


Компонентное/модульное (unit testing) 
- это проверка работоспособности отдельных функциональных модулей, процессов или частей кода приложения. 

Unit-тестирование позволяет избежать ошибок или быстро исправить их при обновлении или дополнении ПО новыми компонентами, не тратя время на проверку ПО целиком.
Юнит тесты пишут разработчики
Интеграционное 
- проверка взаимодействия модулей.

Подвиды:
компонентное интеграционное - проверка взаимодействия между несколькими компонентами одного приложения.
системное интеграционное - проверка взаимодействия между всеми компонентами системы, между различными приложениями, объединенными в систему, интерфейсами связями с внешними системами.
Системное -  проверка всего приложения.

Основная задача: проверка как функциональных, так и не функциональных требований в системе в целом. 
Основная цель: процесс оценки, который охватывает аспекты, связанные с бизнесом, функциональной спецификой и потребительскими ожиданиями. 
Приемочное 
- тестирование по отношению к потребностям и требованиям пользователям, проводимое с целью дать возможность пользователям, заказчикам принимать систему или нет.
По признаку позитивности сценария:
Позитивное 
- это проверка работает ли система так, как ожидается, при нормальных условиях.  
Цель: проверка того, что при помощи системы можно делать то, для чего она создавалась (проверка формы авторизации - валидные значения)
Негативное 
- проверка того, как система реагирует на неверные, неполные или недопустимые входные данные. 
Цель: обнаружить ошибки и уязвимости, которые могут возникнуть в результате таких действий. (при вводе невалидных значений)
По времени и месту проведения:
Альфа-тестирование 
- тестирование пользователями/заказчиками или независимой командой тестирования внутри организации разработчика.
Цель: оценить общее качество

Бета-тестирование 
- тестирование пользователями и только методом “черного ящика”
Цель: получить оценку пользователей
По подготовленности специалиста:
Интуитивное (ad-hoc) 
- проводится без предварительной подготовки или планирования.
(ни тест-кейсов, ни чек-листов, ни сценариев, полностью опираемся на свой профессионализм и интуицию).

Исследовательское 
- по чек-листу или тест кейсу, сценарию, который разрабатывается или дорабатывается в процессе выполнения самих тестов.

Gorilla testing 
- это тестирование представляет собой тестирование «черного ящика», фокусирующееся на ограниченной части приложения, продукта или системы.

Monkey testing 
- это метод предполагает ввод случайных данных и выполнение случайных действий в приложении. 
Различия: monkey testing является более хаотичным и менее предсказуемым, тогда как Gorilla testing  является более структурированным и целенаправленным. 
По цели тестирования
дымовое (smoke testing) - тестирование “только самого важного”.
ре-тест функционала (повторное) (retest) -  проверка того, что поломанное действительно исправили.
critical path test — тестирование, которое фокусируется на проверке наиболее важных функций и элементов приложения.
тестирование нового функционала (new feature testing) - проверка того, что все новое работает верно.
санитарное тестирование - представляет собой анализ (части) продукта после его модификации. Оно является подвидом регрессионного тестирования.
регрессионное тестирование (regression testing) - проверка того, что то, что и работало, по - прежнему работает после внесения изменений в код системы  (исправление ошибки, реализация новой функции).
приемочное тестирование - тестирование по отношению к потребностям и требованиям пользователям, проводимое с целью дать возможность пользователям, заказчикам принимать систему или нет.
End-to-end тестирование, или сквозное тестирование - это вид тестирования, используемый для проверки ПО от начала до конца, а также его интеграцию с внешними интерфейсами. (относится к приемочному)
По разработке тестовых сценариев
на основе требований - проверка того, что каждая функциональность, описанная в спецификации требований, была реализована правильно и соответствует ожиданиям.
User Story  -  это приём записи требований, который помогает команде разработки понять нужду клиента и после обсуждения выбрать, описать и утвердить то решение, которое удовлетворит эту нужду. 
по вариантам использования - проверка того, как система будет использоваться пользователями. Оно включает разработку сценариев на основе реальных случаев использования системы (use cases), описывающих последовательность действий, выполняемых пользователем для достижения определенной цели
на основе моделей - это тестирование программного обеспечения, в котором варианты тестирования (англ. test cases) частично или целиком получаются из модели, описывающей некоторые аспекты (чаще функциональные) тестируемой системы (англ. system under test). Модели могут отображать желаемое поведение системы или использоваться для создания тестовых стратегий или среды тестирования.
по степени автоматизации
ручное - тестирование, в котором тест-кейсы выполняются человеком вручную без использования средств автоматизации.
автоматизированное - набор техник, подходов и инструментальных средств, позволяющий исключить человека из выполнения некоторых задач в процессе тестирования. 
смешанное - ручной подход сочетается с автоматизированным.
По уровню представления системы
фронтенд тестирование - это проверка юзабельности и функциональности интерфейса сайта/приложения. Проще говоря, проверка вида и срабатывания меню, форм, кнопок и других элементов, с которыми работает пользователь/клиент.
бэкенд тестирование - это все, что относится к server-side. То есть всё в приложении, что делается на стороне сервера, а не у пользователя.



Какие виды тестирования относятся 
к нефункциональному тестированию?



Тестирование документации
помогает оценить необходимые усилия по тестированию и отслеживать выполнение требований. 
Программная документация включает в себя план тестирования, тестовые случаи и раздел требований. 
Тестирование установки (Installation Testing)
позволяет удостовериться в том, что ПО корректно устанавливается и настраивается, накат новых версий происходит без ошибок, а также есть возможность деинсталлировать и удалить данное ПО.

Цель — проверка успешности установки приложения в целевой системе, вместе с нужными модулями/зависимостями.
Тестирование производительности (Performance testing)
используется для обеспечения надежной работы программных приложений при ожидаемой рабочей нагрузке. 
Делится на несколько типов:
Нагрузочное тестирование – симулирует работу определенного количества пользователей, чтобы проверить, как система реагирует на возрастающую нагрузку.
Стресс-тестирование – проверяет, как система работает при экстремальных нагрузках. 
Тестирование на выносливость – проводится для оценки поведения системы при постоянной нагрузке.
Объемное тестирование (Volume testing): проверяет, как система работает с большим объемом данных. 
Проверка на утечку памяти (оперативной) - обязательная проверка
Тестирование надежности
(Reliability Testing)
проверяет способность приложения работать без сбоев и ошибок в течение длительного времени.

Основные типы тестирования надежности:
Стресс-тестирование 
Нагрузочное тестирование 
Тестирование на отказ (Failure Testing): Исследует, как система реагирует на сбои и ошибки. Это может включать отключение компонентов или имитацию сбоев:
Отказ оборудования
Сетевые сбои
Системные сбои
Сбои приложений
Проблемы с электропитанием
Человеческие ошибки
Кибератаки
Сбой в программном обеспечении
Тестирование на восстановление (Recovery Testing): Оценивает, насколько быстро и эффективно система может восстановиться после сбоя или ошибки.
Долговременное тестирование (Soak Testing): Проверяет, как система работает в течение длительного времени под постоянной нагрузкой. 
Тестирование на устойчивость (Stability Testing): Оценивает, насколько система устойчива к изменениям в среде, таким как обновления программного обеспечения или изменения конфигурации.
Back Up (Резервное копирование) — это процесс создания копий данных, которые могут быть использованы для восстановления информации в случае ее потери или повреждения. 
Типы резервных копий:
Полное резервное копирование (Full Backup): Создает полную копию всех данных.
Инкрементное резервное копирование (Incremental Backup): Копируются только те данные, которые изменились с момента последнего резервного копирования (полного или инкрементного). Этот метод экономит время и место, но требует всех предыдущих копий для восстановления.
Дифференциальное резервное копирование (Differential Backup): Копируются все данные, измененные с момента последнего полного резервного копирования. Требует больше места, чем инкрементное, но восстановление быстрее, поскольку нужно только последнее полное и последнее дифференциальное копирование.
Restore (Восстановление) — это процесс возвращения данных из резервной копии в рабочую систему.
Тестирование стабильности
проверяет работоспособность приложения при длительном тестировании с постоянной нагрузкой (на утечки памяти, снижение производительности или ошибки).
Используют:
Нагрузочное тестирование.
Стресс-тестирование.
Долговременное тестирование.
Тестирование на устойчивость.
Тестирование производительности.
Тестирование на отказ.
Тестирование безопасности






заключается в поиске всех возможных слабых мест в системе, которые могут привести к потере информации.
Принципы безопасности ПО:
Конфиденциальность означает, что конфиденциальная информация должна быть защищена от несанкционированного доступа. 
Целостность означает, что данные должны быть защищены от изменения несанкционированными лицами. 
Доступность означает, что информация должна быть доступна только тем, кто имеет на это право. 
Аутентификация и авторизация пользователей — это процессы, которые используются для определения легитимности пользователей и предоставления им прав доступа к системе.
Шифрование данных — это процесс преобразования данных в неразборчивый вид, чтобы они не могли быть прочитаны или использованы злоумышленниками.
Виды уязвимостей:
Инъекции — это уязвимости, связанные с возможностью внедрения зловредного кода в приложение через входные данные, такие как поля форм, URL-адреса, файлы и т.д.
Недостаточная авторизация и аутентификация — это уязвимости, связанные с отсутствием или недостаточной проверкой подлинности пользователей, что может привести к несанкционированному доступу к системе, краже учетных данных и т.д.
Утечки информации — это уязвимости, связанные с некорректным хранением или передачей конфиденциальной информации.
Недостатки в защите приложения — это уязвимости, связанные с недостаточной защитой приложения от внешних атак, таких как DDoS-атаки, переполнение буфера, уязвимости в системе контроля доступа и т.д.
Уязвимости в софте третьих сторон — это уязвимости, связанные с использованием приложением стороннего кода, который может содержать уязвимости, такие как небезопасные библиотеки и фреймворки, открытые порты, уязвимости в настройках и т.д.
Тестирование эффективности использования ресурсов
процесс проверки ПО на предмет того, как оно использует системные ресурсы, такие как процессор, память, дисковое пространство и сетевую пропускную способность.
Цель: определение возможных проблем с производительностью, которые могут возникнуть при использовании ПО, и устранении их для оптимизации работы системы.
Этапы:
Планирование
Сбор данных
Анализ данных
Оптимизация
Повторное тестирование
Тестирование масштабируемости (Scalability testing)
это тестирование стабильной работы системы при ожидаемом увеличении нагрузки, например, при большем количестве пользователей или объеме данных.
Цель такого тестирования - проверить, насколько хорошо приложение работает под нагрузкой и как оно справляется с увеличением объема данных.
Подходы к масштабированию:
горизонтальное - увеличение производительности путём добавления дополнительных узлов (серверов) - в ряды, вширь.
вертикальное - увеличение производительности путём добавления ресурсов (ЦП, ОЗУ, дисковое пространство) к существующему узлу - вверх, в высоту.
Удобства использования
(Usability testing)
оценивает, насколько просто и удобно пользоваться приложением. 

Оно фокусируется на таких аспектах, как эффективность, производительность, удовлетворенность пользователей, понятность интерфейса и интуитивность использования.

UX (пользовательский опыт) - охватывает все аспекты взаимодействия пользователя с продуктом, включая эмоции, удовлетворение и общее восприятие. UX включает в себя usability, но также учитывает дизайн, контент, доступность и другие факторы.

Модерируемое тестирование (с участием модератора)
Немодерируемое тестирование (без участия модератора)
Тестирование с использованием прототипов
A/B тестирование (две версии интерфейса)
Тестирование на реальных пользователях
Тестирование с использованием сценариев
Тестирование Pixel Perfect 
Какие инструментами можно пользоваться при тестировании Pixel Perfect?
это процесс проверки верстки веб-страницы на точное соответствие дизайну. 

Проверяется, чтобы каждый элемент страницы (текст, изображения, кнопки, элементы формы и т.д.) находился в точно том же месте, имел те же размеры и цвет, что и в дизайне.
Инструменты:
PerfectPixel: расширение для Chrome, Opera и Edge, которое позволяет наложить дизайн-макет поверх веб-страницы и сравнить их пиксель за пикселем.
Pixel Perfect: расширение для Firefox, которое также позволяет наложить макет на веб-страницу и сравнить их пиксели.
Другие инструменты: существуют и другие инструменты, такие как инструменты для сравнения скриншотов, которые могут быть полезны для проверки верстки.
Локализации/
Совместимости/ Адаптивности
Локализации - это процесс проверки работы продукта в условиях конкретной локали (языка, региона, культуры), чтобы обеспечить его корректное функционирование и соответствие требованиям пользователей. 

Основные задачи: проверка правильности перевода текста, формата даты и времени, валюты, и других культурных особенностей.

Совместимости - это процесс проверки того, как ПО работает в разных средах, например, с различными операционными системами, браузерами, устройствами и т.д. 

Цель тестирования – найти любые ошибки, которые могут возникнуть при использовании программы в разных конфигурациях.

Виды тестов на совместимость

C операционными системами
С браузерами
С устройствами
С сетями
С аппаратным обеспечением
Обратная совместимость
Прямая совместимость

Адаптивности - это процесс определения степени простоты или сложности переноса программного компонента или приложения на другую платформу. 
Цель  - убедиться, что контент и функциональность сайта доступны и удобны для пользователей, независимо от того, с какого устройства они заходят.

Например, можно проверить, как приложение работает на разных операционных системах, с разными браузерами или на разных устройствах.
ETL-тестирование/
Тестирование перед миграцией
(Pre-Migration testing)/
Миграционное тестирование (Migration testing)/
Тестирование после миграции
(Post-Migration testing)?


ETL (Extract, Transform, Load) - это процесс, объединяющий три этапа: извлечение, преобразование и загрузка данных из одного источника в другой, т.е. процесс перемещения данных из одного места в другое, из одного формата в другой или из одного приложения в другое. 

ETL-тестирование - это вид тестирования, выполняемый для гарантии того, что данные, перенесенные из исходной в целевую базу данных, являются точными и соответствуют действующим правилам преобразования.

Тестирование перед миграцией - это проверка того, происходит ли миграция легаси-системы на новую систему с минимальными сбоями и простоями, сохранением целостности данных. 

Миграционное тестирование - это общий термин для тестирования процесса миграции, который включает в себя тестирование перед миграцией, во время миграции и после миграции. 

Тестирование после миграции - это проверка того, что данные правильно мигрировали и система работает как ожидалось после завершения миграции.
Тестирование ремонтопригодности
оценивает, насколько легко модифицировать, обновлять или исправлять программный продукт.
Типы обслуживания:
1.  Корректирующее обслуживание
2. Обслуживание усовершенствований
3. Адаптивное обслуживание
4. Профилактическое обслуживание


Тестирование на пригодность к обслуживанию может проводиться на различных этапах жизненного цикла разработки ПО.
Тестирование заменимости (replaceability)
направлено на оценку способности компонента, системы или устройства быть замененным другим компонентом без существенного изменения или ухудшения функциональности всей системы. 
Цель — убедиться, что замена компонента не приводит к непредвиденным проблемам или ухудшению работы всей системы, и что замена может быть выполнена быстро и эффективной.
Основные аспекты тестирования заменимости:
1. Совместимость на уровне интерфейсов: Проверка того, что заменяемый компонент имеет тот же интерфейс (аппаратный или программный), что и оригинальный, и может быть подключен или установлен без дополнительных адаптаций.
2. Функциональная эквивалентность: Оценка того, что заменяемый компонент обеспечивает ту же функциональность, что и оригинальный. 
3. Физическая совместимость: В случае аппаратных компонентов проверяется, что новый компонент физически подходит для установки в существующее оборудование.
4. Электрическая и сигнальная совместимость: Для аппаратных компонентов важно убедиться, что новый компонент соответствует электрическим характеристикам и не вызывает конфликтов по напряжению или сигналам.
5. Совместимость по требованиям и стандартам: Новый компонент должен соответствовать тем же стандартам и нормативам, что и оригинал, чтобы обеспечить безопасное и надёжное функционирование системы.
6. Тестирование в условиях реальной эксплуатации: Проверка, что замена компонента не влияет на стабильность и эффективность работы системы в реальных условиях эксплуатации.




