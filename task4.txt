Задание 4

Что такое Тест дизайн?
Для чего нужны Техники тест дизайна?
Какие знаете техники черного ящика?/Опишите их.
Какие знаете техники белого ящика?/Опишите их
Что такое Тест дизайн?

Тест-дизайн — это процесс разработки техник и методов тестирования. 

Цель: оптимизировать проверку функциональности программы, найти ошибки и убедиться, что она соответствует требованиям.

Для чего нужны Техники тест дизайна?

Техники тест-дизайна необходимы для структурирования процесса тестирования.

Главная задача — подготовить рабочую документацию, то есть разработать сценарии, которые позволят протестировать максимальное количество функций за минимальное время.

Какие знаете техники черного ящика? Опишите их.

Тестирование черного ящика — это метод тестирования ПО, который проверяет функциональность системы без знания ее внутренней структуры. 
Существуют следующие техники тест-дизайна “черного ящика”:
Эквивалентное разбиение
Анализ граничных значений
Анализ причинно-следственных связей
Тестирование по сценариям использования
Исчерпывающее тестирование
Таблица принятия решений
Тестирование состояний и переходов
Комбинаторные техники:
Метод парного тестирования 
Базовый выбор
Каждый выбор
Ортогональные матрицы
Основанные на опыте: 
Техника предугадывания ошибок
Исследовательское тестирование
На основе чек-листов

Эквивалентное разбиение

 это метод тестирования, где мы делим входные данные продукта на группы (классы эквивалентности), которые ведут себя одинаково. 
Классы эквивалентности могут быть:


Линейные - упорядоченное множество на числовой прямой (цифры)
Нелинейные - неупорядоченное множество данных, не имеющих граничных значений (буквы, спецсимволы, валюта и др)


Валидные - допустимые значения исходя из требований, позитивные тесты
           Невалидные - недопустимые значения, негативные тесты



Анализ граничных значений 

это тестирование проводится на границах допустимых входных значений, чтобы найти ошибки, возникающие при работе на граничных значениях.
Проще говоря, граничные значения — это те места, в которых один класс эквивалентности переходит в другой.
Цель этой техники — найти ошибки, связанные с граничными значениями. На каждой границе диапазона следует проверить по три значения:
граничное значение;
значение перед границей;
значение после границы.

Анализ причинно-следственных связей 
Этот метод используется в тестировании для определения комбинаций условий (причин), которые могут привести к определенному результату (следствию) в системе. 
Проще говоря, это простая проверка базовых действий и их результата. 


Например, если нажать крестик в правом верхнем углу окна (причина), оно закроется (следствие), и т.д. Этот метод позволяет проверить все возможности системы, а также обнаружить баги и улучшить техническую документацию продукта.


Использование техники на примере “записной книжки”: 
После ввода всех данных нового контакта и нажатия кнопки Создать (причина) приложение должно автоматически создать карточку с номером телефона, фотографией и ФИО человека (следствие). 
Тесты покажут, можно ли оставлять одно или несколько полей пустыми, распознает ли система кириллицу, латиницу или оба алфавита, а также другие параметры.
Тестирование по сценариям использования

это проверка того, как пользователи будут взаимодействовать с вашим продуктом в реальных условиях. 
Это означает, что вы создаете серию шагов (сценариев), которые имитируют действия пользователя.

Цель: убедиться, что каждая функциональная часть программы работает так, как ожидается в реальных условиях. 
Пример сценария использования
Например, пользователь хочет купить товар в интернет-магазине. Сценарий может включать поиск товара, добавление его в корзину, ввод информации для оплаты, подтверждение заказа, получение подтверждения на email. Этот сценарий тестируется от начала до конца.
Ключевые компоненты сценария использования

Актор (пользователь)  ⇒ Система ⇒ Шаги ⇒  Ожидаемый результат
Преимущества:

Реалистичность.
Легкость в понимании
Эффективность


Когда применять:
На ранних этапах разработки
При изменении системы
При разработке пользовательских интерфейсов (UI/UX)
Исчерпывающее тестирование

включает в себя проверку всех возможных комбинаций входных данных и состояний системы. 
На практике исчерпывающее тестирование редко возможно из-за следующих причин:
Время и ресурсы: Проверка всех возможных комбинаций может занять огромное количество времени и ресурсов.
Практическая невозможность: В реальных системах количество возможных комбинаций может быть настолько велико, что их проверка становится практически невозможной.
Поэтому в большинстве случаев применяются более эффективные методы тестирования, такие как выборочное тестирование, тестирование на основе рисков и другие подходы, которые позволяют покрыть наиболее критичные сценарии с меньшими затратами времени и ресурсов.


Пример:
Условие
Тест 1
Тест 2
Тест 3
Тест 4
Тест 5
Тест 6
Тест 7
Тест 8
Тест 9
Выходной день
истина
-
-
-
истина
-
истина
-


Будний день
-
истина
-
-
-
истина


истина


День Масленицы
-
-
истина
-
истина
истина




истина
День Рождения
-
-
-
истина
-
-
истина
истина
истина
Действие


















Скидка 10%






X




X
X


Скидка 5 %
X
















Скидка 15 %




X


X
X




X
Скидка 0 %


X

















Таблица принятия решений 
это инструмент, который помогает вам понять, какие действия нужно предпринять в разных ситуациях. 

Это таблица с колонками для условий (например, погода, время дня) и строками для действий (например, взять зонтик, остаться дома). В каждой ячейке таблицы вы указываете, какое действие нужно выполнить в конкретной ситуации.

Цель: повысить общее тестовое покрытие, не упуская все (возможные) комбинации.

Часто используемые обозначения:
«Y» может использоваться для обозначения «Истины (True)». Можно использовать «И», «T» или «1».
«N» означает «Ложь (False)». Также допускается использование обозначений «Л», «F» или «0». 
«—» или «N/A» указывает, что условие не имеет значения.



Тестирование с помощью таблиц принятия решений является одной из наиболее эффективных техник тестирования ПО. Её можно использовать в различных сценариях и контекстах. К тому же табличное представление помогает анализировать бизнес-логику продукта. 

Дерево принятия решений
 
- это как карта, которая помогает принимать решения. 

Она показывает разные варианты действий и их возможные результаты. Каждое решение - это ветка на дереве, а каждый результат - это лист. Эта карта помогает выбрать самый лучший вариант, оценивая вероятность и желательность каждого результата.

Тестирование состояний и переходов 
изучает, как система переходит из одного состояния в другое в ответ на события

Состояния — это различные условия (или режимы), в которых может находиться система. Определенные события вызывают («триггерят») переходы — перемещения между этими состояниями

Тестирование переходов между состояниями полезно для систем с четкой последовательностью состояний и событий. 

Например, у нас есть программа управления светофорами, которая меняет режим работы светофоров в зависимости от времени суток, интенсивности дорожного движения и количества пешеходов. Тестирование переходов состояний поможет убедиться, что система правильно реагирует на различные комбинации этих факторов.

Диаграммы переходов состоят из состояний, представленных прямоугольниками, переходов, представленных в виде стрелок между состояниями, событий, вызывающих переходы, и действий, связанных с переходами:

Кружки обозначают начальное и конечное состояние.

Комбинаторные техники:

это методы тестирования ПО, которые позволяет эффективно обнаруживать ошибки, связанные с взаимодействием различных параметров и настроек системы. 
Метод попарного тестирования (Pairwise testing)

при данной технике тест-кейсы создаются таким образом, чтобы выполнить все возможные отдельные комбинации каждой пары входных параметров.

Вместо тестирования всех возможных комбинаций параметров, попарное тестирование фокусируется на проверке каждой пары значений. Это значительно сокращает количество тестовых случаев, сохраняя при этом высокий уровень тестового покрытия.

Преимущества: Эффективное использование ресурсов, Повышение качества продукта, Сокращение времени до выхода на рынок, Снижение рисков
Недостатки: Недостаточное покрытие, Сложность выбора параметров, Необходимость автоматизации

Пример: приложение для заказа еды, которое предлагает разные варианты для пользователя. 

Эти варианты включают:

Тип кухни (итальянская, японская, грузинская).
Способ доставки (курьер, самовывоз).
Оплата (наличными, картой).
Всего у нас есть 12 (3*2*2) возможных комбинаций, которые могут возникнуть при взаимодействии этих параметров. Однако применение попарного тестирования позволяет уменьшить количество тестовых случаев до 6-ти без потери качества проверки.
Итальянская
Курьер
Наличные


1
1
Итальянская
  2.    Самовывоз
  2.    Картой


1
2
  2.    Японская
Курьер
  2.    Картой


2
1
  2.     Японская
  2.    Самовывоз
Наличные


2
2
  3.     Грузинская
Курьер
Наличные


3
1
  3.     Грузинская
  2.    Самовывоз
  2.     Картой


3
2


Базовый выбор

ориентирована на выбор базового набора тестовых значений для каждой переменной, а затем создание тестовых случаев путем изменения только одной переменной за раз, оставляя остальные на базовом уровне.

Основные шаги:
Определение базового набора значений
Создание тестового случая для базового набора: Создается один тестовый случай, который использует базовые значения для всех входных переменных.
Варьирование значений: Для каждой входной переменной создается отдельный тестовый случай, в котором эта переменная принимает одно из своих альтернативных значений, в то время как все остальные переменные остаются на базовом уровне.

Преимущества:
Простота реализации и понимания
Эффективность в тестировании большинства критичных путей и вариантов.
Недостатки:
Может не покрывать некоторые сложные взаимодействия между переменными.
Не всегда гарантирует максимальное покрытие всех возможных комбинаций.
Техника базового выбора полезна, когда нужно быстро и эффективно создать набор тестов, особенно в ситуациях, когда полное покрытие всех возможных комбинаций не требуется или невозможно.

Пример, тестирование формы регистрации пользователя
Исходные данные: 							          
    Форма регистрации, которая имеет следующие поля:			
Тип аккаунта (Account Type): 						
Варианты: Личный (Personal), Бизнес (Business)			         
Язык (Language):
Варианты: Русский (Russian), Английский (English)
Метод уведомления (Notification Method):
Варианты: Электронная почта (Email), СМС (SMS)

Основные шаги: 
Определение базового набора значений
Создание тестового случая
Варьирование значений

Тестовый случай
Тип аккаунта 
Язык 
Метод уведомления
Комментарий
1 (Базовый)
Личный (Personal)
Русский (Russian)
Электронная почта (Email)
Все значения установлены на базовые.
2
Бизнес (Business)
Русский (Russian)
Электронная почта (Email)
Изменен только Тип аккаунта.
3
Личный (Personal)
Английский (English)
Электронная почта (Email)
Изменен только Язык.
4
Личный (Personal)
Русский (Russian)
СМС (SMS)
Изменен только Метод уведомления.


Каждый выбор

эта стратегия требует, чтобы каждое значение каждого параметра было включено по крайней мере в один тестовый пример.
Плюсы: легкость применения.
Минусы: минимальное покрытие.
Пример:
В магазине бытовой техники планируют продавать товары следующих категорий: холодильники, морозильные камеры стиральные и сушильные машины. Доступны следующие бренды: Haier, Lg, Bosch, Hotpoint, Indesit, Leran и Atlant. Также существует возможность выбора способа доставки: самовывоз, доставка.
Согласно тексту задания, можно выделить следующие параметры:

Категория
Брэнд
Способ получения
Холодильник
Haier
Самовывоз
Морозильная камера
Lg
Доставка
Стиральная машина
Bosch


Сушильная машина
Hotpoint




Indesit




Leran




Atlant




Если выполнять проверку всех возможных комбинаций, то получаем 4*7*2=56 проверок.

Применим технику каждого выбора. Эта техника означает, что каждое значение каждого конкретного параметра должно быть использовано по крайней мере один раз в тестовом наборе. Таким образом, результирующее количество случаев будет равно количеству значений параметра с наибольшим диапазоном. Каждый выбор представляет собой технику минимального покрытия. Получаем 7 проверок.

№ 
Категория
Брэнд
Способ получения
1
Холодильник
Haier
Самовывоз
2
Морозильная камера
Lg
Доставка
3
Стиральная машина
Bosch
Самовывоз
4
Сушильная машина
Hotpoint
Доставка
5
Холодильник
Indesit
Самовывоз
6
Морозильная камера
Leran
Доставка
7
Стиральная машина
Atlant
Самовывоз


Ортогональные матрицы

- это таблица, обладающая следующими свойствами:
 Любые два столбца таблицы содержат все комбинации значений этих столбцов.
 Если какая-либо пара значений двух столбцов встречается несколько раз, то все возможные парные комбинации значений этих столбцов должны встретиться столько же раз.
Т.е. в отличие от механизма all pairs, в основе которого лежит фокус на том, чтобы каждая возможная пара значений для двух параметров была проверена хотя бы один раз, ортогональные массивы обеспечивают более равномерное и полное покрытие. Количество тестов может быть больше, чем в попарном тестировании, но все равно значительно меньше, чем при полном переборе всех возможных комбинаций. 

ОСНОВАННЫЕ НА ОПЫТЕ

это методы, которые полагаются на знания и опыт тестировщика. 
Техника предугадывания ошибок
Суть: Тестировщик предполагает, где могут возникнуть ошибки в ПО, основываясь на своем опыте и знаниях о типичных проблемах.
Преимущества: Позволяет найти ошибки, которые могут быть пропущены другими методами тестирования.
Недостатки: Зависит от опыта тестировщика, может быть субъективным.
Пример: Если тестировщик знает, что в предыдущих проектах были проблемы с обработкой данных, он может сосредоточиться на тестировании именно этой области.
Исследовательское тестирование:
Суть: Тестировщик свободно исследует ПО, чтобы найти ошибки.
Преимущества: Позволяет обнаружить нестандартные ошибки, способствует творческому подходу к тестированию.
Недостатки: Сложно контролировать процесс, может быть не систематичным.
Пример: Тестировщик может попробовать различные комбинации ввода данных, чтобы проверить, как ПО реагирует на непредсказуемые ситуации.
Тестирование на основе чек-листов:
Суть: Тестировщик использует заранее подготовленный список проверок, чтобы убедиться, что все ключевые функции ПО работают правильно.
Преимущества: Обеспечивает систематичность тестирования, позволяет проверить все важные аспекты ПО.
Недостатки: Может быть недостаточно гибким, не позволяет найти ошибки, которые не включены в чек-лист.
Пример: Чек-лист может содержать пункты о проверке функциональности кнопок, ввода данных, корректности отображаемой информации.
Какие знаете техники белого ящика? Опишите их

Тестирование белого ящика —  это метод проверки программного обеспечения, который фокусируется на внутренней структуре и коде программы. 
Основная цель — проверить внутреннюю логику и структуру программы. 
Основные методы тестирования белого ящика включают:
1. Покрытие операторов (Statement Coverage)
Оператор — это любая отдельная команда в программе, которая выполняет определенное действие. Это может быть присвоение значения переменной, ввод/вывод данных, вызов функции и так далее.

Цель: проверить, что каждый оператор в коде выполняется хотя бы один раз.
Метод: Создать тестовые случаи, которые проходят через каждый оператор кода.
Преимущества: Простота реализации.
Недостатки: Не гарантирует проверку всех возможных путей выполнения программы.
2. Покрытие решений (Decision Coverage)
Решения — это логические конструкции, которые выбирают один из нескольких возможных путей выполнения программы в зависимости от условий. Наиболее распространенными примерами решений являются операторы if, else if и else, а также switch-выражения. 

Цель: проверить, что каждый оператор условия (if, while, switch) выполняется как минимум один раз с истинным и ложным результатом.
Метод: Создать тестовые случаи, которые проверяют все возможные исходы условий.
Преимущества: Обеспечивает более глубокую проверку логики кода.
Недостатки: Может пропустить ошибки в сложных логических выражениях.
3. Покрытие условий (Condition Coverage)
Условия —  это логическое выражение, которое возвращает либо true (истина), либо false (ложь). Условия используются в решениях для определения, какой путь выполнения программы выбрать.

Цель: Проверить, что каждая часть логического выражения условия (if, while, switch) выполняется как минимум один раз с истинным и ложным результатом.
Метод: Создать тестовые случаи, которые проверяют все возможные комбинации значений в логических выражениях.
Преимущества: Обеспечивает наиболее полное покрытие логики кода.
Недостатки: Может потребовать создания большого количества тестовых случаев.
