Задание 6
Ответить на вопросы:
Что такое Ошибка/Дефект/Отказ?
Перечислите Основные типы багов?
Перечислите “Хитрые баги”?
Приведите пример Blocker bug
Приведите пример Critical bug
Приведите пример Major bug
Приведите пример Minor bug
Приведите пример Trivial bug
Какие основные цели локализации дефекта?
Где могут находиться дефекты?
Перечислите методы локализации дефекта в клиентской части
Перечислите методы локализации дефекта в серверной части

Что такое Ошибка/Дефект/Отказ?

Ошибка (Error) — любое действие человека, которое вызвало неверный результат. 
Ошибки могут быть допущены разработчиками, тестировщиками или пользователями. Ошибки могут вызвать дефекты, если они не будут обнаружены и исправлены.
Дефект (Defect) — это ошибка в ПО, которая приводит к некорректному функционированию системы.
Отказ (Failure) — это невозможность системы выполнять свою задачу.
Сбой — это временное нарушение работы системы, которое может привести к неправильному результату или поведению. 
Сбои могут быть вызваны внешними факторами, такими как отключение электроэнергии или ошибка пользователя. 
Основные типы багов
Функциональные: Неправильная работа функций, несоответствие спецификации.
Логические: Ошибки в логике программы, приводящие к неверному результату.
Интерфейсные: Проблемы с графическим интерфейсом, например, некорректное отображение элементов.
Производительные: Проблемы с производительностью системы, например, медленная работа, зависания.
Безопасности: Проблемы, связанные с безопасностью системы, например, уязвимости, утечки данных.
Устаревшие: Баги, которые были исправлены в предыдущих версиях программного обеспечения.
Хитрые баги
это термин, используемый для описания сложных и трудноуловимых ошибок в программном обеспечении. 

Переполнение буфера (Buffer Overflow): Происходит, когда программа записывает больше данных в буфер, чем тот способен вместить, что может привести к непредсказуемому поведению.
Состояние гонки (Race Condition): Ошибка, возникающая в многопоточных приложениях, когда два или более потока пытаются одновременно получить доступ к одним и тем же ресурсам, что может привести к неправильным результатам.
Проблемы с памятью (Memory Leaks): Неосвобождение памяти, что со временем может привести к исчерпанию доступной памяти и зависаниям приложения.
Ошибки времени (Timing Errors): Процессы, которые зависят от времени выполнения, могут вести себя некорректно при изменении скорости выполнения или задержек в сети.
Логические ошибки (Logical Errors): Ошибки, которые не вызывают сбоев, но приводят к неправильным результатам, например, если условия в коде заданы неверно.
Невыполненные условия (Uninitialized Variables): Использование переменных, которые не были инициализированы, может привести к непредсказуемым значениям.
Проблемы с совместимостью (Compatibility Issues): Программное обеспечение может вести себя по-разному на различных устройствах или в различных средах, что может привести к трудноуловимым багам.
Необработанные исключения (Unhandled Exceptions): Если исключение возникает в коде, но не обрабатывается, это может привести к зависаниям или сбоям.
Системные ограничения (System Limitations): Некоторые баги могут возникать из-за превышения системных ограничений, например, лимитов на количество открытых файлов.
Конфликты зависимостей (Dependency Conflicts): Ошибки, вызванные несовместимостью библиотек или пакетов, которые могут быть сложными для обнаружения.
Примеры багов
Blocker bug: Программа не запускается или не работает совсем. Например, ошибка, которая предотвращает запуск приложения.
Critical bug: Серьезный дефект, который может привести к потере данных или повреждению системы.
Например, ошибка, которая приводит к некорректной работе приложения.
Major bug: Дефект, который существенно влияет на функциональность приложения, но не приводит к его полному отказу. 
Например, ошибка, которая приводит к тому, что пользователь не может зарегистрироваться в приложении.
Minor bug: Дефект, который не влияет на основную функциональность приложения, но может привести к неудобствам для пользователя. Например, ошибка, которая приводит к тому, что текст на кнопке отображается неправильно.
Trivial bug: Незначительный дефект, который не влияет на функциональность приложения и не вызывает неудобств для пользователя. 
Например, ошибка, которая приводит к тому, что цвет кнопки немного отличается от цвета в дизайне.


Основные цели локализации дефекта
Определить источник ошибки: Где именно в коде находится ошибка.
Понять причину ошибки: Почему произошла ошибка.
Предложить решение: Как исправить ошибку.
Где могут находиться дефекты
Код: Ошибки в коде, которые могут быть вызваны неправильной логикой, использованием неверных переменных, или некорректным управлением памятью.
Данные: Некорректные или неполные данные, которые могут привести к некорректному функционированию системы.
Конфигурация: Неправильно настроенное программное обеспечение, которое может привести к проблемам в работе.
Интерфейсы: Ошибки в интерфейсах между различными частями системы, например, между клиентским и серверным приложением.
Методы локализации дефекта
Клиентская часть:
1. Тестирование на разных устройствах/браузерах
2. Инспектирование DOM: Визуальный анализ структуры страницы через инспектор в браузере для поиска проблем с версткой, CSS и взаимодействиями элементов.
3. Логи браузера/консоль разработчика: Проверка ошибок и предупреждений в консоли разработчика в браузере (F12). Это помогает выявить JavaScript ошибки, сетевые запросы, проблемы с загрузкой ресурсов и другие ошибки.
4. Отладка (debugging) — этап разработки компьютерной программы, на котором обнаруживают, локализуют и устраняют ошибки.
5. Инструменты сетевого мониторинга: Использование вкладки "Сеть" (Network) в консоли разработчика браузера для анализа сетевых запросов, ответа сервера, заголовков и статусов HTTP
6. Анализ производительности (Performance): Изучение вкладки "Performance" для выявления проблем с производительностью клиентской части, таких как долгие загрузки или утечки памяти
7. Перезапуск с кешем и без кеша: Очистка кеша и повторная загрузка страницы для исключения проблем, связанных с кешированием
8. Эмуляция/симуляция мобильных устройств: Использование инструментов эмуляции и симуляции для проверки отображения и работы на разных на мобильных устройствах.
9. Fiddler/Charles Proxy: Для перехвата и анализа сетевых запросов, когда нужно глубже проанализировать обмен данными между клиентом и сервером
Серверная часть:
1. Анализ HTTP-ответов: Проверка статусов HTTP-ответов, содержимого тела ответа и заголовков с помощью инструментов браузера или сетевых утилит. Это позволяет понять, есть ли ошибки со стороны сервера (например, 500 Internal Server Error)
2. Postman: Использование инструментов для отправки API-запросов напрямую к серверу для проверки корректности обработки запросов и ответов без участия клиентской части.
3. Логи сервера: Просмотр серверных логов, чтобы выявить ошибки или исключения, возникающие на сервере при выполнении запросов
4. Мониторинг серверных ресурсов: Анализ нагрузки на сервер, доступности ресурсов (CPU, память, диск) с помощью мониторинговых систем, чтобы понять, не является ли дефект следствием нехватки ресурсов.
5. Дебаг на стороне сервера: Совместная работа с разработчиками для использования отладочных инструментов сервера (например, отладка с помощью IDE или других инструментов логирования).
6. Анализ базы данных: Проверка запросов к базе данных на правильность, выполнение и результаты с помощью инструментов мониторинга БД (например, SQL-запросы, используемые сервером)
7. Тестирование кэширования: Проверка корректности работы серверного кэширования, например, как сервер обрабатывает повторяющиеся запросы и обновляет данные
