адание 7


Требования - это что?
Для чего нужен Анализ требований в разработке программного обеспечения?
Перечислите Виды требований
Перечислите Функциональные уровни требований
Перечислите Нефункциональные уровни требований
Перечислите техники сбора требований
Что такое Спецификация требований программного обеспечения (SRS)?
Что такое Use Case?
Приведите пример Use Case
Перечислите Характеристики качества требований
Приведите пример к каждой Характеристике качества требований
Что такое Пользовательские истории(User story)?
Приведите пример Пользовательских историй(User story)
Какие преимущества и недостатки Пользовательских историй(User story)?
Что такое Критерии приемки(Acceptance criteria)?
Перечислите виды и форматы критерий приемки
Приведите пример критерий приемки- список правил
Приведите пример критерий приемки- поведенческий сценарий
Перечислите критерии INVEST для User story

Требования - это что?

это описание функциональных и нефункциональных характеристик ПО, которое должно быть реализовано в системе.
Спецификация требований к ПО является основным документом, определяющим план разработки ПО.
Для чего нужен Анализ требований в разработке ПО?

Анализ требований — это ключевой этап в разработке ПО, который позволяет определить, что именно нужно создать, а также установить критерии, которым система должна соответствовать. 
Анализ помогает:
Понять потребности пользователей и преобразовать их в конкретные требования.
Обеспечить эффективную коммуникацию между разработчиками, заказчиками и пользователями.
Снизить риск ошибок и переделок на более поздних этапах разработки.
Увеличить эффективность разработки и получить более качественный продукт.
Перечислите Виды требований

Функциональные: описывают, что система должна делать, то есть ее функциональность.
Нефункциональные: описывают, как система должна быть реализована, то есть ее качества.
Функциональные уровни требований:
Уровень пользователя: описывают, как пользователи взаимодействуют с системой.
Уровень системы: описывают, как отдельные компоненты системы взаимодействуют друг с другом.
Уровень данных: описывают, как данные хранятся и обрабатываются в системе.
Перечислите Нефункциональные уровни требований

Уровни нефункциональных требований:

бизнес-правила - это некие ограничения, из которых вытекают требования, они продиктованы нам либо бизнесом, либо законодательством.
атрибуты качества - это характеристики программного обеспечения, которые фокусируются на качественных аспектах работы системы, таких как производительность, безопасность, удобство использования и надежность.
внешние интерфейсы - описание аспектов взаимодействия с другими системами и операционной средой. 
ограничения - условия, ограничивающие выбор возможных решений по реализации отдельных требований или их наборов. Они существенно ограничивают выбор средств, инструментов и стратегий при разработке внешнего вида и структуры (в т.ч. архитектуры) продукта или системы.

Техники сбора требований:
Интервью: беседа с пользователями для получения информации об их потребностях.
Анкетирование: рассылка анкет пользователям для получения информации о их предпочтениях.
Наблюдение: наблюдение за работой пользователей для выявления их проблем.
Прототипирование: создание прототипа системы для получения обратной связи от пользователей.
Документация: анализ существующей документации для получения информации о системе.


Что такое Спецификация требований ПО(SRS)?

Software Requirements Specification
— это документ, который содержит полное описание всех требований к системе.  SRS должен быть ясным, точным, полным, доступным для понимания и удобным для использования.
Что такое Use Case?

— это описание взаимодействия пользователя с системой для выполнения конкретной задачи.
Приведите пример Use Case

Пример,
Имя Use Case: "Покупка товара"
Роли: "Клиент", "Система"
Описание: Клиент выбирает товар в каталоге, добавляет его в корзину, вводит данные для оплаты и подтверждает заказ.
Предпосылки: Клиент зарегистрирован в системе.
Шаги:
Клиент выбирает товар в каталоге.
Клиент добавляет товар в корзину.
Клиент вводит данные для оплаты.
Клиент подтверждает заказ.
Результат: Заказ оформлен и подтвержден.
Характеристики качества требований:
1) Полнота. Все ли описано? Ничего ли не забыли? Что, если у нас все еще есть неописанный функционал или пользовательский сценарий?
Пример: "Система должна позволять пользователям регистрироваться, используя адрес электронной почты и пароль. Пароль должен быть длиной не менее 8 символов и содержать как минимум одну цифру и один специальный символ." Это требование содержит все необходимые детали для реализации функциональности регистрации.

2) Корректность и согласованность. Все утверждения должны быть правильными, правдивыми и иметь смысл.
Пример: "При вводе неверного пароля система должна отображать сообщение 'Неверный пароль'." Это требование точно описывает ожидаемое поведение системы при некорректном вводе пароля.
3) Последовательность (Непротиворечивость). Требования не должны противоречить сами себе. Обычно это происходит, когда требований много. Аналитик просто забывает, что уже писал о параметре, и снова придумывает его поведение. Иногда он придумывает что-то немного другое.
Пример: "Система должна отображать товары в порядке убывания цены. Система должна отображать товары в порядке возрастания рейтинга." Эти требования противоречат друг другу и не могут быть реализованы одновременно.

4) Ясность. Требования должны быть прозрачными и понятными для всех, с возможностью только одной интерпретации.
Пример: "Пользователь должен видеть список всех доступных товаров на главной странице." Это требование понятно для всех участников проекта, включая разработчиков и пользователей.

5) Тестируемость. Можно ли протестировать эту функциональность? Подумайте об этом заранее. А бывает, что разработчик уже все сделал, и только тогда тестировщик понимает, что задачу никак нельзя проверить. Или можно проверить вручную, но нельзя написать автотесты, фреймворк под новую функциональность не заточен. Это может быть проблемой, если в компании все проверки автоматизируются.
Пример: "Время отклика системы не должно превышать 500 мс." Это требование можно проверить с помощью тестирования производительности.

6) Прослеживаемость (или "трассируемость"). Требования должны быть оформлены в структурированном виде и, в идеале, иметь уникальные идентификаторы.
Пример: "Требование 1.2.3: Система должна отображать товары в порядке убывания цены." Требование имеет уникальный идентификатор, что позволяет проследить его связь с другими требованиями.
7) Атомарность. Требование не может быть разделено на несколько более детальных требований без потери полноты.
Пример: "Требование 1: Система должна позволять пользователям регистрироваться. Требование 2 (приоритет 2): Система должна отправлять уведомления о новых сообщениях." Требования пронумерованы и имеют указанные приоритеты, что помогает в планировании разработки.

8) Выполнимость. Требование может быть реализовано в рамках данного проекта.
Пример: "Система должна поддерживать до 1000 одновременных пользователей." Это требование реально осуществимо с учетом доступных ресурсов и технологий.

9) Модифицируемость. Модифицируемость требований подразумевает легкость их изменения.
Пример: "Требование 2.1: Система должна поддерживать интеграцию с платежными системами PayPal и Stripe." Это требование сформулировано таким образом, что позволяет легко добавить поддержку других платежных систем в будущем.


Что такое Пользовательские истории(User story)?


 - это короткое описание того, что пользователь хочет сделать с системой, с точки зрения пользователя.
Пример:
"Как пользователь, я хочу войти в систему, чтобы получить доступ к своим данным".
"Как администратор, я хочу добавить нового пользователя, чтобы управлять доступом к системе".
Какие преимущества и недостатки Пользовательских историй(User story)?

Преимущества:
Простые для понимания: User story написаны простым языком и понятны всем участникам проекта.
Гибкие: User story можно легко изменять и дополнять в процессе разработки.
Фокусируются на пользователе: User story помогают разработчикам сосредоточиться на потребностях пользователей.
Недостатки:
Недостаточно детализированы: User story могут быть слишком общими и не содержать достаточно деталей для разработчиков.
Трудно оценить: User story могут быть трудно оценить по времени и трудозатратам.

Что такое Критерии приемки(Acceptance criteria)?

это список правил, которые определяют, когда пользовательская история считается выполненной.
Перечислите виды и форматы критерий приемки
В зависимости от начальной задачи и сложности требований, критерии приемки могут быть записаны в различных форматах, а именно: 


ориентированные на сценарий - тип критериев приемки, который описывается в форме сценария и иллюстрирует каждый критерий. Он рассматривается через последовательность Given/When/Then (GWT) – Дано/Когда/Тогда;

ориентированные на правила - форма, ориентированная на правила, предполагает наличие набора правил, описывающих поведение системы. На основе этих правил можно составить конкретные сценарии. 
Обычно, критерии, составленные с использованием этой формы, выглядят как простой список маркеров или шаблон чеклиста.

пользовательские форматы - при использовании собственных критериев приемки, при условии, что они служат своей цели, четко написаны на понятном языке и не могут быть неправильно истолкованы.  

готовые шаблоны критериев приемки:
Klariti предлагает шаблон журнала критериев приемки в формате MS Excel в составе пакета шаблонов для тестирования программного обеспечения. 
Aha! предоставляет несколько шаблонов, которые позволяют описывать разные пользовательские истории и их критерии приемки. 
PowerSlides включает шаблон в формате PPT с шестью динамическими дизайнами для написания простых предложений пользовательских историй и критериев приемки. 
На Stakeholder Map вы можете скачать полностью редактируемый шаблон требований проекта в формате Excel, который включает в себя критерии приемки. 
Приведите пример критерий приемки - список правил


Пример,
"Пользователь должен иметь возможность зарегистрироваться, используя электронную почту и пароль".
"Система должна отправлять электронное письмо с подтверждением регистрации".
"Пользователь должен иметь возможность сбросить пароль".
Приведите пример критерий приемки- поведенческий сценарий
Пример:
"Когда пользователь вводит неправильный логин или пароль, система выдает сообщение об ошибке".
"Когда пользователь успешно входит в систему, система перенаправляет его на главную страницу".
Перечислите критерии INVEST для User story

INVEST – это аббревиатура, которая обозначает набор характеристик, которыми должна обладать пользовательская история, чтобы быть хорошо написанной и понятной. Эти критерии помогают сделать истории независимыми, обсуждаемыми, ценными, проверяемыми, компактными и тестируемыми.
I — Independent (Независимая): История должна быть автономной и не зависеть от других историй. Это позволяет планировать и выполнять её отдельно, минимизируя блокировки
N — Negotiable (Обсуждаемая): История — это не контракт, а приглашение к обсуждению. Её детали могут уточняться в ходе взаимодействия с командой и заказчиком.
V — Valuable (Ценная): История должна приносить ценность конечному пользователю или бизнесу. Это помогает сфокусироваться на задачах, которые действительно важны.
E — Estimable (Оцениваемая): История должна быть понятной и достаточной для оценки её сложности и ресурсов на выполнение.
S — Small (Компактная): История должна быть достаточно маленькой, чтобы её можно было реализовать за один спринт (обычно не более недели).
T — Testable (Тестируемая): История должна быть формулируема таким образом, чтобы можно было проверить её выполнение с точки зрения требований.
Что такое приемка приложения?

это обязанность заказчика проверить и осмотреть продукт, который поставщик предоставил по заказу.

Что такое аудит приложения?

представляет из себя оценочную проверку состояния как продукта целиком, так и отдельных атрибутов качества, на соответствие объективным характеристикам и требованиям, которые сформулированы в технической документации либо предполагаются из ожиданий конечных пользователей.

Этапы проведения аудита:

Тестирование методом Black Box
Тестирование методом Grey Box
Тестирование методом Grey Box с использованием результатов прошлого этапа

Чем приемка приложения отличается от аудита?


Отличия
Приемка приложения (Acceptance Testing)
Аудит
Цель
Проверить и подтвердить, что разработанное приложение соответствует бизнес-требованиям, техническим спецификациям и готово к использованию конечными пользователями. Приемка проводится для того, чтобы убедиться, что продукт может быть принят заказчиком или выпущен на рынок.


Провести независимую проверку процессов, документации, стандартов, процедур разработки и соответствия различным требованиям (например, внутренним регламентам, стандартам безопасности или отраслевым нормам). Аудит ориентирован на оценку соответствия проекта установленным критериям качества или процессам, а не только на проверку функциональности.
Участники процесса
Обычно участвуют заказчики (клиенты), конечные пользователи и команда тестировщиков. В некоторых случаях разработчики могут участвовать для быстрого исправления выявленных дефектов.
Проводится независимой стороной (внутренние или внешние аудиторы), которая не участвовала непосредственно в разработке или тестировании продукта. Это могут быть специалисты по качеству, комплаенсу или внешние консультанты.
Область проверки
Фокусируется на функциональности и удобстве использования приложения. Проверяются конкретные сценарии использования, соответствие бизнес-требованиям и ожиданиям пользователя. Основное внимание уделяется тому, чтобы приложение работало так, как предполагается, и решало задачи пользователей.
Охватывает более широкие аспекты: процесс разработки, соблюдение стандартов безопасности, документация, управление проектом и тестированием, соответствие нормативным требованиям и регламентам. Аудит часто включает проверку качества процессов, а не только конечного продукта.
 Методы и подходы
Осуществляется в основном через выполнение заранее подготовленных тестовых сценариев (acceptance tests), пользовательских сценариев и функциональных проверок. Основное внимание уделяется реальной работе приложения.
Включает анализ документации, проверку процессов разработки, управление изменениями, контроль качества, а также соответствие стандартам (например, ISO, CMMI). Методы могут включать интервью, изучение документации и отчетов, проверки исходного кода, анализ безопасности и др.
Результаты
Результатом является решение о том, что продукт готов к выпуску или внедрению. Если приемка успешна, продукт передается заказчику или пользователям для дальнейшего использования.
Результатом является отчет с оценкой текущего состояния процесса разработки, рекомендациями по улучшению, выявленными несоответствиями и потенциальными рисками. Аудит может не привести к немедленному одобрению или отклонению продукта.
Риск и ответственность
Основной риск связан с возможностью того, что приложение не будет соответствовать требованиям, и его придется дорабатывать. За приемку обычно ответственны клиенты и конечные пользователи, которые либо принимают продукт, либо отклоняют его.
Риски включают несоответствие процесса разработки стандартам или обнаружение серьезных нарушений. Ответственность за проведение аудита лежит на аудиторской группе, а за устранение выявленных проблем — на команде разработки и менеджерах проекта



Назовите типы метрик тестирования. Каковы цели ввода метрик? Приведите примеры метрик.

1. Passed / Failed Test Cases. Используется для оценки отношения удачно пройденных тестов к завершившимся с ошибками. Метрика помогает оценить успешность прохождения тестов.
2. Not Run Test Cases. Демонстрирует количество тестов, которые нужно выполнить для данного проекта. Метрика помогает определить причины невыполнения тестов и способы их устранения.
3. Open / Closed Bugs. Формируется из отношения открытых багов к закрытым. Метрика оценивает скорость устранения багов, а также позволяет выявить причины, по которым ошибки остались незакрытыми.
4. Reopened / Closed Bugs. Рассчитывает соотношение переоткрытых багов к закрытым. Метрика демонстрирует эффективность закрытия бага разработчиками и поможет выявить причины, по которым исправление ошибок находится на низком уровне.
5. Bugs by Severity / Priority. Общее количество багов по серьёзности/приоритету. Метрика показывает качество предоставляемого кода на тестирование.
В процессе тестирования метрики используются:
- для отслеживания прогресса команды по срокам проекта, дедлайнам и другим временным отрезкам;
- качественной оценки текущего состояния системы;
- контроля качества процесса тестирования;
- постановки целей и эффективного планирования исходя из понимания существующих проблем.
